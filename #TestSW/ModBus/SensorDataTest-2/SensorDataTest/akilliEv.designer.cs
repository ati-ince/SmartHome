#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SensorDataTest
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbAkilliEv")]
	public partial class akilliEvDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaspnet_Application(aspnet_Application instance);
    partial void Updateaspnet_Application(aspnet_Application instance);
    partial void Deleteaspnet_Application(aspnet_Application instance);
    partial void Inserttbl_ValueType(tbl_ValueType instance);
    partial void Updatetbl_ValueType(tbl_ValueType instance);
    partial void Deletetbl_ValueType(tbl_ValueType instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void Insertaspnet_Path(aspnet_Path instance);
    partial void Updateaspnet_Path(aspnet_Path instance);
    partial void Deleteaspnet_Path(aspnet_Path instance);
    partial void Insertaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Updateaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Deleteaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Insertaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Updateaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Deleteaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Insertaspnet_Profile(aspnet_Profile instance);
    partial void Updateaspnet_Profile(aspnet_Profile instance);
    partial void Deleteaspnet_Profile(aspnet_Profile instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void Insertaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Updateaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Deleteaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Insertaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Updateaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Deleteaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Inserttbl_ActiveSensorParameter(tbl_ActiveSensorParameter instance);
    partial void Updatetbl_ActiveSensorParameter(tbl_ActiveSensorParameter instance);
    partial void Deletetbl_ActiveSensorParameter(tbl_ActiveSensorParameter instance);
    partial void Inserttbl_Device(tbl_Device instance);
    partial void Updatetbl_Device(tbl_Device instance);
    partial void Deletetbl_Device(tbl_Device instance);
    partial void Inserttbl_DeviceGroup(tbl_DeviceGroup instance);
    partial void Updatetbl_DeviceGroup(tbl_DeviceGroup instance);
    partial void Deletetbl_DeviceGroup(tbl_DeviceGroup instance);
    partial void Inserttbl_DeviceType(tbl_DeviceType instance);
    partial void Updatetbl_DeviceType(tbl_DeviceType instance);
    partial void Deletetbl_DeviceType(tbl_DeviceType instance);
    partial void Inserttbl_Gateway(tbl_Gateway instance);
    partial void Updatetbl_Gateway(tbl_Gateway instance);
    partial void Deletetbl_Gateway(tbl_Gateway instance);
    partial void Inserttbl_Sensor(tbl_Sensor instance);
    partial void Updatetbl_Sensor(tbl_Sensor instance);
    partial void Deletetbl_Sensor(tbl_Sensor instance);
    partial void Inserttbl_SensorData(tbl_SensorData instance);
    partial void Updatetbl_SensorData(tbl_SensorData instance);
    partial void Deletetbl_SensorData(tbl_SensorData instance);
    partial void Inserttbl_SensorType(tbl_SensorType instance);
    partial void Updatetbl_SensorType(tbl_SensorType instance);
    partial void Deletetbl_SensorType(tbl_SensorType instance);
    partial void Inserttbl_SensorTypeParameter(tbl_SensorTypeParameter instance);
    partial void Updatetbl_SensorTypeParameter(tbl_SensorTypeParameter instance);
    partial void Deletetbl_SensorTypeParameter(tbl_SensorTypeParameter instance);
    partial void Inserttbl_SensorTypeParameterName(tbl_SensorTypeParameterName instance);
    partial void Updatetbl_SensorTypeParameterName(tbl_SensorTypeParameterName instance);
    partial void Deletetbl_SensorTypeParameterName(tbl_SensorTypeParameterName instance);
    partial void Inserttbl_Unit(tbl_Unit instance);
    partial void Updatetbl_Unit(tbl_Unit instance);
    partial void Deletetbl_Unit(tbl_Unit instance);
    #endregion
		
		public akilliEvDataContext() : 
				base(global::SensorDataTest.Properties.Settings.Default.dbAkilliEvConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public akilliEvDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public akilliEvDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public akilliEvDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public akilliEvDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
		{
			get
			{
				return this.GetTable<aspnet_Application>();
			}
		}
		
		public System.Data.Linq.Table<tbl_ValueType> tbl_ValueTypes
		{
			get
			{
				return this.GetTable<tbl_ValueType>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this.GetTable<aspnet_Path>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationAllUser> aspnet_PersonalizationAllUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationAllUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationPerUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Profile> aspnet_Profiles
		{
			get
			{
				return this.GetTable<aspnet_Profile>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_SchemaVersion> aspnet_SchemaVersions
		{
			get
			{
				return this.GetTable<aspnet_SchemaVersion>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_WebEvent_Event> aspnet_WebEvent_Events
		{
			get
			{
				return this.GetTable<aspnet_WebEvent_Event>();
			}
		}
		
		public System.Data.Linq.Table<tbl_ActiveSensorParameter> tbl_ActiveSensorParameters
		{
			get
			{
				return this.GetTable<tbl_ActiveSensorParameter>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Device> tbl_Devices
		{
			get
			{
				return this.GetTable<tbl_Device>();
			}
		}
		
		public System.Data.Linq.Table<tbl_DeviceGroup> tbl_DeviceGroups
		{
			get
			{
				return this.GetTable<tbl_DeviceGroup>();
			}
		}
		
		public System.Data.Linq.Table<tbl_DeviceType> tbl_DeviceTypes
		{
			get
			{
				return this.GetTable<tbl_DeviceType>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Gateway> tbl_Gateways
		{
			get
			{
				return this.GetTable<tbl_Gateway>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Sensor> tbl_Sensors
		{
			get
			{
				return this.GetTable<tbl_Sensor>();
			}
		}
		
		public System.Data.Linq.Table<tbl_SensorData> tbl_SensorDatas
		{
			get
			{
				return this.GetTable<tbl_SensorData>();
			}
		}
		
		public System.Data.Linq.Table<tbl_SensorType> tbl_SensorTypes
		{
			get
			{
				return this.GetTable<tbl_SensorType>();
			}
		}
		
		public System.Data.Linq.Table<tbl_SensorTypeParameter> tbl_SensorTypeParameters
		{
			get
			{
				return this.GetTable<tbl_SensorTypeParameter>();
			}
		}
		
		public System.Data.Linq.Table<tbl_SensorTypeParameterName> tbl_SensorTypeParameterNames
		{
			get
			{
				return this.GetTable<tbl_SensorTypeParameterName>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Unit> tbl_Units
		{
			get
			{
				return this.GetTable<tbl_Unit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Applications")]
	public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationName;
		
		private string _LoweredApplicationName;
		
		private System.Guid _ApplicationId;
		
		private string _Description;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships;
		
		private EntitySet<aspnet_Path> _aspnet_Paths;
		
		private EntitySet<aspnet_Role> _aspnet_Roles;
		
		private EntitySet<aspnet_User> _aspnet_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Application()
		{
			this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
			this._aspnet_Paths = new EntitySet<aspnet_Path>(new Action<aspnet_Path>(this.attach_aspnet_Paths), new Action<aspnet_Path>(this.detach_aspnet_Paths));
			this._aspnet_Roles = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles), new Action<aspnet_Role>(this.detach_aspnet_Roles));
			this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredApplicationName
		{
			get
			{
				return this._LoweredApplicationName;
			}
			set
			{
				if ((this._LoweredApplicationName != value))
				{
					this.OnLoweredApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredApplicationName = value;
					this.SendPropertyChanged("LoweredApplicationName");
					this.OnLoweredApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this._aspnet_Memberships;
			}
			set
			{
				this._aspnet_Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Paths", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this._aspnet_Paths;
			}
			set
			{
				this._aspnet_Paths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this._aspnet_Roles;
			}
			set
			{
				this._aspnet_Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_User> aspnet_Users
		{
			get
			{
				return this._aspnet_Users;
			}
			set
			{
				this._aspnet_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_ValueType")]
	public partial class tbl_ValueType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ValueType_Id;
		
		private string _ParameterValueType_Name;
		
		private EntitySet<tbl_SensorTypeParameter> _tbl_SensorTypeParameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValueType_IdChanging(int value);
    partial void OnValueType_IdChanged();
    partial void OnParameterValueType_NameChanging(string value);
    partial void OnParameterValueType_NameChanged();
    #endregion
		
		public tbl_ValueType()
		{
			this._tbl_SensorTypeParameters = new EntitySet<tbl_SensorTypeParameter>(new Action<tbl_SensorTypeParameter>(this.attach_tbl_SensorTypeParameters), new Action<tbl_SensorTypeParameter>(this.detach_tbl_SensorTypeParameters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueType_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ValueType_Id
		{
			get
			{
				return this._ValueType_Id;
			}
			set
			{
				if ((this._ValueType_Id != value))
				{
					this.OnValueType_IdChanging(value);
					this.SendPropertyChanging();
					this._ValueType_Id = value;
					this.SendPropertyChanged("ValueType_Id");
					this.OnValueType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterValueType_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ParameterValueType_Name
		{
			get
			{
				return this._ParameterValueType_Name;
			}
			set
			{
				if ((this._ParameterValueType_Name != value))
				{
					this.OnParameterValueType_NameChanging(value);
					this.SendPropertyChanging();
					this._ParameterValueType_Name = value;
					this.SendPropertyChanged("ParameterValueType_Name");
					this.OnParameterValueType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_ValueType_tbl_SensorTypeParameter", Storage="_tbl_SensorTypeParameters", ThisKey="ValueType_Id", OtherKey="ValueType_Id")]
		public EntitySet<tbl_SensorTypeParameter> tbl_SensorTypeParameters
		{
			get
			{
				return this._tbl_SensorTypeParameters;
			}
			set
			{
				this._tbl_SensorTypeParameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_SensorTypeParameters(tbl_SensorTypeParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_ValueType = this;
		}
		
		private void detach_tbl_SensorTypeParameters(tbl_SensorTypeParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_ValueType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Memberships.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Paths")]
	public partial class aspnet_Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _PathId;
		
		private string _Path;
		
		private string _LoweredPath;
		
		private EntityRef<aspnet_PersonalizationAllUser> _aspnet_PersonalizationAllUser;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnLoweredPathChanging(string value);
    partial void OnLoweredPathChanged();
    #endregion
		
		public aspnet_Path()
		{
			this._aspnet_PersonalizationAllUser = default(EntityRef<aspnet_PersonalizationAllUser>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredPath", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredPath
		{
			get
			{
				return this._LoweredPath;
			}
			set
			{
				if ((this._LoweredPath != value))
				{
					this.OnLoweredPathChanging(value);
					this.SendPropertyChanging();
					this._LoweredPath = value;
					this.SendPropertyChanged("LoweredPath");
					this.OnLoweredPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_PersonalizationAllUser", ThisKey="PathId", OtherKey="PathId", IsUnique=true, IsForeignKey=false)]
		public aspnet_PersonalizationAllUser aspnet_PersonalizationAllUser
		{
			get
			{
				return this._aspnet_PersonalizationAllUser.Entity;
			}
			set
			{
				aspnet_PersonalizationAllUser previousValue = this._aspnet_PersonalizationAllUser.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_PersonalizationAllUser.Entity = null;
						previousValue.aspnet_Path = null;
					}
					this._aspnet_PersonalizationAllUser.Entity = value;
					if ((value != null))
					{
						value.aspnet_Path = this;
					}
					this.SendPropertyChanged("aspnet_PersonalizationAllUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="PathId", OtherKey="PathId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Paths.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Paths.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_PersonalizationAllUsers")]
	public partial class aspnet_PersonalizationAllUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PathId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationAllUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (this._aspnet_Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationAllUser = null;
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationAllUser = this;
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_PersonalizationPerUser")]
	public partial class aspnet_PersonalizationPerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _PathId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPathIdChanging(System.Nullable<System.Guid> value);
    partial void OnPathIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationPerUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (this._aspnet_Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Profile")]
	public partial class aspnet_Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _PropertyNames;
		
		private string _PropertyValuesString;
		
		private System.Data.Linq.Binary _PropertyValuesBinary;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPropertyNamesChanging(string value);
    partial void OnPropertyNamesChanged();
    partial void OnPropertyValuesStringChanging(string value);
    partial void OnPropertyValuesStringChanged();
    partial void OnPropertyValuesBinaryChanging(System.Data.Linq.Binary value);
    partial void OnPropertyValuesBinaryChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_Profile()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyNames", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyNames
		{
			get
			{
				return this._PropertyNames;
			}
			set
			{
				if ((this._PropertyNames != value))
				{
					this.OnPropertyNamesChanging(value);
					this.SendPropertyChanging();
					this._PropertyNames = value;
					this.SendPropertyChanged("PropertyNames");
					this.OnPropertyNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValuesString", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyValuesString
		{
			get
			{
				return this._PropertyValuesString;
			}
			set
			{
				if ((this._PropertyValuesString != value))
				{
					this.OnPropertyValuesStringChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesString = value;
					this.SendPropertyChanged("PropertyValuesString");
					this.OnPropertyValuesStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValuesBinary", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PropertyValuesBinary
		{
			get
			{
				return this._PropertyValuesBinary;
			}
			set
			{
				if ((this._PropertyValuesBinary != value))
				{
					this.OnPropertyValuesBinaryChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesBinary = value;
					this.SendPropertyChanged("PropertyValuesBinary");
					this.OnPropertyValuesBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Profile = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Profile = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Roles.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Roles.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_SchemaVersions")]
	public partial class aspnet_SchemaVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Feature;
		
		private string _CompatibleSchemaVersion;
		
		private bool _IsCurrentVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnCompatibleSchemaVersionChanging(string value);
    partial void OnCompatibleSchemaVersionChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    #endregion
		
		public aspnet_SchemaVersion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompatibleSchemaVersion", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CompatibleSchemaVersion
		{
			get
			{
				return this._CompatibleSchemaVersion;
			}
			set
			{
				if ((this._CompatibleSchemaVersion != value))
				{
					this.OnCompatibleSchemaVersionChanging(value);
					this.SendPropertyChanging();
					this._CompatibleSchemaVersion = value;
					this.SendPropertyChanged("CompatibleSchemaVersion");
					this.OnCompatibleSchemaVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntityRef<aspnet_Profile> _aspnet_Profile;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_Profile = default(EntityRef<aspnet_Profile>);
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_Profile", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Profile aspnet_Profile
		{
			get
			{
				return this._aspnet_Profile.Entity;
			}
			set
			{
				aspnet_Profile previousValue = this._aspnet_Profile.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Profile.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Profile.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Users.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Users.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_WebEvent_Events")]
	public partial class aspnet_WebEvent_Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventId;
		
		private System.DateTime _EventTimeUtc;
		
		private System.DateTime _EventTime;
		
		private string _EventType;
		
		private decimal _EventSequence;
		
		private decimal _EventOccurrence;
		
		private int _EventCode;
		
		private int _EventDetailCode;
		
		private string _Message;
		
		private string _ApplicationPath;
		
		private string _ApplicationVirtualPath;
		
		private string _MachineName;
		
		private string _RequestUrl;
		
		private string _ExceptionType;
		
		private string _Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(string value);
    partial void OnEventIdChanged();
    partial void OnEventTimeUtcChanging(System.DateTime value);
    partial void OnEventTimeUtcChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnEventSequenceChanging(decimal value);
    partial void OnEventSequenceChanged();
    partial void OnEventOccurrenceChanging(decimal value);
    partial void OnEventOccurrenceChanged();
    partial void OnEventCodeChanging(int value);
    partial void OnEventCodeChanged();
    partial void OnEventDetailCodeChanging(int value);
    partial void OnEventDetailCodeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnApplicationPathChanging(string value);
    partial void OnApplicationPathChanged();
    partial void OnApplicationVirtualPathChanging(string value);
    partial void OnApplicationVirtualPathChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnRequestUrlChanging(string value);
    partial void OnRequestUrlChanged();
    partial void OnExceptionTypeChanging(string value);
    partial void OnExceptionTypeChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
		
		public aspnet_WebEvent_Event()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Char(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTimeUtc", DbType="DateTime NOT NULL")]
		public System.DateTime EventTimeUtc
		{
			get
			{
				return this._EventTimeUtc;
			}
			set
			{
				if ((this._EventTimeUtc != value))
				{
					this.OnEventTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._EventTimeUtc = value;
					this.SendPropertyChanged("EventTimeUtc");
					this.OnEventTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventSequence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventSequence
		{
			get
			{
				return this._EventSequence;
			}
			set
			{
				if ((this._EventSequence != value))
				{
					this.OnEventSequenceChanging(value);
					this.SendPropertyChanging();
					this._EventSequence = value;
					this.SendPropertyChanged("EventSequence");
					this.OnEventSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOccurrence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventOccurrence
		{
			get
			{
				return this._EventOccurrence;
			}
			set
			{
				if ((this._EventOccurrence != value))
				{
					this.OnEventOccurrenceChanging(value);
					this.SendPropertyChanging();
					this._EventOccurrence = value;
					this.SendPropertyChanged("EventOccurrence");
					this.OnEventOccurrenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCode", DbType="Int NOT NULL")]
		public int EventCode
		{
			get
			{
				return this._EventCode;
			}
			set
			{
				if ((this._EventCode != value))
				{
					this.OnEventCodeChanging(value);
					this.SendPropertyChanging();
					this._EventCode = value;
					this.SendPropertyChanged("EventCode");
					this.OnEventCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailCode", DbType="Int NOT NULL")]
		public int EventDetailCode
		{
			get
			{
				return this._EventDetailCode;
			}
			set
			{
				if ((this._EventDetailCode != value))
				{
					this.OnEventDetailCodeChanging(value);
					this.SendPropertyChanging();
					this._EventDetailCode = value;
					this.SendPropertyChanged("EventDetailCode");
					this.OnEventDetailCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(1024)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationPath", DbType="NVarChar(256)")]
		public string ApplicationPath
		{
			get
			{
				return this._ApplicationPath;
			}
			set
			{
				if ((this._ApplicationPath != value))
				{
					this.OnApplicationPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationPath = value;
					this.SendPropertyChanged("ApplicationPath");
					this.OnApplicationPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationVirtualPath", DbType="NVarChar(256)")]
		public string ApplicationVirtualPath
		{
			get
			{
				return this._ApplicationVirtualPath;
			}
			set
			{
				if ((this._ApplicationVirtualPath != value))
				{
					this.OnApplicationVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationVirtualPath = value;
					this.SendPropertyChanged("ApplicationVirtualPath");
					this.OnApplicationVirtualPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestUrl", DbType="NVarChar(1024)")]
		public string RequestUrl
		{
			get
			{
				return this._RequestUrl;
			}
			set
			{
				if ((this._RequestUrl != value))
				{
					this.OnRequestUrlChanging(value);
					this.SendPropertyChanging();
					this._RequestUrl = value;
					this.SendPropertyChanged("RequestUrl");
					this.OnRequestUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExceptionType", DbType="NVarChar(256)")]
		public string ExceptionType
		{
			get
			{
				return this._ExceptionType;
			}
			set
			{
				if ((this._ExceptionType != value))
				{
					this.OnExceptionTypeChanging(value);
					this.SendPropertyChanging();
					this._ExceptionType = value;
					this.SendPropertyChanged("ExceptionType");
					this.OnExceptionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_ActiveSensorParameter")]
	public partial class tbl_ActiveSensorParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActiveSensorParameter_Id;
		
		private int _Sensor_Id;
		
		private int _SensorTypeParameter_Id;
		
		private EntityRef<tbl_Sensor> _tbl_Sensor;
		
		private EntityRef<tbl_SensorTypeParameter> _tbl_SensorTypeParameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActiveSensorParameter_IdChanging(int value);
    partial void OnActiveSensorParameter_IdChanged();
    partial void OnSensor_IdChanging(int value);
    partial void OnSensor_IdChanged();
    partial void OnSensorTypeParameter_IdChanging(int value);
    partial void OnSensorTypeParameter_IdChanged();
    #endregion
		
		public tbl_ActiveSensorParameter()
		{
			this._tbl_Sensor = default(EntityRef<tbl_Sensor>);
			this._tbl_SensorTypeParameter = default(EntityRef<tbl_SensorTypeParameter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveSensorParameter_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActiveSensorParameter_Id
		{
			get
			{
				return this._ActiveSensorParameter_Id;
			}
			set
			{
				if ((this._ActiveSensorParameter_Id != value))
				{
					this.OnActiveSensorParameter_IdChanging(value);
					this.SendPropertyChanging();
					this._ActiveSensorParameter_Id = value;
					this.SendPropertyChanged("ActiveSensorParameter_Id");
					this.OnActiveSensorParameter_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sensor_Id", DbType="Int NOT NULL")]
		public int Sensor_Id
		{
			get
			{
				return this._Sensor_Id;
			}
			set
			{
				if ((this._Sensor_Id != value))
				{
					if (this._tbl_Sensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensor_IdChanging(value);
					this.SendPropertyChanging();
					this._Sensor_Id = value;
					this.SendPropertyChanged("Sensor_Id");
					this.OnSensor_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorTypeParameter_Id", DbType="Int NOT NULL")]
		public int SensorTypeParameter_Id
		{
			get
			{
				return this._SensorTypeParameter_Id;
			}
			set
			{
				if ((this._SensorTypeParameter_Id != value))
				{
					if (this._tbl_SensorTypeParameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorTypeParameter_IdChanging(value);
					this.SendPropertyChanging();
					this._SensorTypeParameter_Id = value;
					this.SendPropertyChanged("SensorTypeParameter_Id");
					this.OnSensorTypeParameter_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Sensor_tbl_ActiveSensorParameter", Storage="_tbl_Sensor", ThisKey="Sensor_Id", OtherKey="Sensor_Id", IsForeignKey=true)]
		public tbl_Sensor tbl_Sensor
		{
			get
			{
				return this._tbl_Sensor.Entity;
			}
			set
			{
				tbl_Sensor previousValue = this._tbl_Sensor.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Sensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Sensor.Entity = null;
						previousValue.tbl_ActiveSensorParameters.Remove(this);
					}
					this._tbl_Sensor.Entity = value;
					if ((value != null))
					{
						value.tbl_ActiveSensorParameters.Add(this);
						this._Sensor_Id = value.Sensor_Id;
					}
					else
					{
						this._Sensor_Id = default(int);
					}
					this.SendPropertyChanged("tbl_Sensor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorTypeParameter_tbl_ActiveSensorParameter", Storage="_tbl_SensorTypeParameter", ThisKey="SensorTypeParameter_Id", OtherKey="SensorTypeParameter_Id", IsForeignKey=true)]
		public tbl_SensorTypeParameter tbl_SensorTypeParameter
		{
			get
			{
				return this._tbl_SensorTypeParameter.Entity;
			}
			set
			{
				tbl_SensorTypeParameter previousValue = this._tbl_SensorTypeParameter.Entity;
				if (((previousValue != value) 
							|| (this._tbl_SensorTypeParameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_SensorTypeParameter.Entity = null;
						previousValue.tbl_ActiveSensorParameters.Remove(this);
					}
					this._tbl_SensorTypeParameter.Entity = value;
					if ((value != null))
					{
						value.tbl_ActiveSensorParameters.Add(this);
						this._SensorTypeParameter_Id = value.SensorTypeParameter_Id;
					}
					else
					{
						this._SensorTypeParameter_Id = default(int);
					}
					this.SendPropertyChanged("tbl_SensorTypeParameter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Device")]
	public partial class tbl_Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Device_Id;
		
		private int _DeviceType_Id;
		
		private int _DeviceGroup_Id;
		
		private string _Device_Name;
		
		private int _Device_Priority;
		
		private System.Nullable<int> _Sensor_Id;
		
		private string _Maximum_Power;
		
		private string _Optimum_Consumption;
		
		private int _Close_Property;
		
		private bool _Delay_Property;
		
		private System.Nullable<int> _Delay_Time;
		
		private System.Nullable<int> _Delay_Repeat;
		
		private int _Record_Frequency;
		
		private EntitySet<tbl_SensorData> _tbl_SensorDatas;
		
		private EntityRef<tbl_DeviceGroup> _tbl_DeviceGroup;
		
		private EntityRef<tbl_DeviceType> _tbl_DeviceType;
		
		private EntityRef<tbl_Sensor> _tbl_Sensor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDevice_IdChanging(int value);
    partial void OnDevice_IdChanged();
    partial void OnDeviceType_IdChanging(int value);
    partial void OnDeviceType_IdChanged();
    partial void OnDeviceGroup_IdChanging(int value);
    partial void OnDeviceGroup_IdChanged();
    partial void OnDevice_NameChanging(string value);
    partial void OnDevice_NameChanged();
    partial void OnDevice_PriorityChanging(int value);
    partial void OnDevice_PriorityChanged();
    partial void OnSensor_IdChanging(System.Nullable<int> value);
    partial void OnSensor_IdChanged();
    partial void OnMaximum_PowerChanging(string value);
    partial void OnMaximum_PowerChanged();
    partial void OnOptimum_ConsumptionChanging(string value);
    partial void OnOptimum_ConsumptionChanged();
    partial void OnClose_PropertyChanging(int value);
    partial void OnClose_PropertyChanged();
    partial void OnDelay_PropertyChanging(bool value);
    partial void OnDelay_PropertyChanged();
    partial void OnDelay_TimeChanging(System.Nullable<int> value);
    partial void OnDelay_TimeChanged();
    partial void OnDelay_RepeatChanging(System.Nullable<int> value);
    partial void OnDelay_RepeatChanged();
    partial void OnRecord_FrequencyChanging(int value);
    partial void OnRecord_FrequencyChanged();
    #endregion
		
		public tbl_Device()
		{
			this._tbl_SensorDatas = new EntitySet<tbl_SensorData>(new Action<tbl_SensorData>(this.attach_tbl_SensorDatas), new Action<tbl_SensorData>(this.detach_tbl_SensorDatas));
			this._tbl_DeviceGroup = default(EntityRef<tbl_DeviceGroup>);
			this._tbl_DeviceType = default(EntityRef<tbl_DeviceType>);
			this._tbl_Sensor = default(EntityRef<tbl_Sensor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Device_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Device_Id
		{
			get
			{
				return this._Device_Id;
			}
			set
			{
				if ((this._Device_Id != value))
				{
					this.OnDevice_IdChanging(value);
					this.SendPropertyChanging();
					this._Device_Id = value;
					this.SendPropertyChanged("Device_Id");
					this.OnDevice_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceType_Id", DbType="Int NOT NULL")]
		public int DeviceType_Id
		{
			get
			{
				return this._DeviceType_Id;
			}
			set
			{
				if ((this._DeviceType_Id != value))
				{
					if (this._tbl_DeviceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceType_IdChanging(value);
					this.SendPropertyChanging();
					this._DeviceType_Id = value;
					this.SendPropertyChanged("DeviceType_Id");
					this.OnDeviceType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceGroup_Id", DbType="Int NOT NULL")]
		public int DeviceGroup_Id
		{
			get
			{
				return this._DeviceGroup_Id;
			}
			set
			{
				if ((this._DeviceGroup_Id != value))
				{
					if (this._tbl_DeviceGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._DeviceGroup_Id = value;
					this.SendPropertyChanged("DeviceGroup_Id");
					this.OnDeviceGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Device_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Device_Name
		{
			get
			{
				return this._Device_Name;
			}
			set
			{
				if ((this._Device_Name != value))
				{
					this.OnDevice_NameChanging(value);
					this.SendPropertyChanging();
					this._Device_Name = value;
					this.SendPropertyChanged("Device_Name");
					this.OnDevice_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Device_Priority", DbType="Int NOT NULL")]
		public int Device_Priority
		{
			get
			{
				return this._Device_Priority;
			}
			set
			{
				if ((this._Device_Priority != value))
				{
					this.OnDevice_PriorityChanging(value);
					this.SendPropertyChanging();
					this._Device_Priority = value;
					this.SendPropertyChanged("Device_Priority");
					this.OnDevice_PriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sensor_Id", DbType="Int")]
		public System.Nullable<int> Sensor_Id
		{
			get
			{
				return this._Sensor_Id;
			}
			set
			{
				if ((this._Sensor_Id != value))
				{
					if (this._tbl_Sensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensor_IdChanging(value);
					this.SendPropertyChanging();
					this._Sensor_Id = value;
					this.SendPropertyChanged("Sensor_Id");
					this.OnSensor_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Maximum_Power", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Maximum_Power
		{
			get
			{
				return this._Maximum_Power;
			}
			set
			{
				if ((this._Maximum_Power != value))
				{
					this.OnMaximum_PowerChanging(value);
					this.SendPropertyChanging();
					this._Maximum_Power = value;
					this.SendPropertyChanged("Maximum_Power");
					this.OnMaximum_PowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Optimum_Consumption", DbType="NVarChar(10)")]
		public string Optimum_Consumption
		{
			get
			{
				return this._Optimum_Consumption;
			}
			set
			{
				if ((this._Optimum_Consumption != value))
				{
					this.OnOptimum_ConsumptionChanging(value);
					this.SendPropertyChanging();
					this._Optimum_Consumption = value;
					this.SendPropertyChanged("Optimum_Consumption");
					this.OnOptimum_ConsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Close_Property", DbType="Int NOT NULL")]
		public int Close_Property
		{
			get
			{
				return this._Close_Property;
			}
			set
			{
				if ((this._Close_Property != value))
				{
					this.OnClose_PropertyChanging(value);
					this.SendPropertyChanging();
					this._Close_Property = value;
					this.SendPropertyChanged("Close_Property");
					this.OnClose_PropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delay_Property", DbType="Bit NOT NULL")]
		public bool Delay_Property
		{
			get
			{
				return this._Delay_Property;
			}
			set
			{
				if ((this._Delay_Property != value))
				{
					this.OnDelay_PropertyChanging(value);
					this.SendPropertyChanging();
					this._Delay_Property = value;
					this.SendPropertyChanged("Delay_Property");
					this.OnDelay_PropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delay_Time", DbType="Int")]
		public System.Nullable<int> Delay_Time
		{
			get
			{
				return this._Delay_Time;
			}
			set
			{
				if ((this._Delay_Time != value))
				{
					this.OnDelay_TimeChanging(value);
					this.SendPropertyChanging();
					this._Delay_Time = value;
					this.SendPropertyChanged("Delay_Time");
					this.OnDelay_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delay_Repeat", DbType="Int")]
		public System.Nullable<int> Delay_Repeat
		{
			get
			{
				return this._Delay_Repeat;
			}
			set
			{
				if ((this._Delay_Repeat != value))
				{
					this.OnDelay_RepeatChanging(value);
					this.SendPropertyChanging();
					this._Delay_Repeat = value;
					this.SendPropertyChanged("Delay_Repeat");
					this.OnDelay_RepeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Record_Frequency", DbType="Int NOT NULL")]
		public int Record_Frequency
		{
			get
			{
				return this._Record_Frequency;
			}
			set
			{
				if ((this._Record_Frequency != value))
				{
					this.OnRecord_FrequencyChanging(value);
					this.SendPropertyChanging();
					this._Record_Frequency = value;
					this.SendPropertyChanged("Record_Frequency");
					this.OnRecord_FrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Device_tbl_SensorData", Storage="_tbl_SensorDatas", ThisKey="Device_Id", OtherKey="Device_Id")]
		public EntitySet<tbl_SensorData> tbl_SensorDatas
		{
			get
			{
				return this._tbl_SensorDatas;
			}
			set
			{
				this._tbl_SensorDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_DeviceGroup_tbl_Device", Storage="_tbl_DeviceGroup", ThisKey="DeviceGroup_Id", OtherKey="DeviceGroup_Id", IsForeignKey=true)]
		public tbl_DeviceGroup tbl_DeviceGroup
		{
			get
			{
				return this._tbl_DeviceGroup.Entity;
			}
			set
			{
				tbl_DeviceGroup previousValue = this._tbl_DeviceGroup.Entity;
				if (((previousValue != value) 
							|| (this._tbl_DeviceGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_DeviceGroup.Entity = null;
						previousValue.tbl_Devices.Remove(this);
					}
					this._tbl_DeviceGroup.Entity = value;
					if ((value != null))
					{
						value.tbl_Devices.Add(this);
						this._DeviceGroup_Id = value.DeviceGroup_Id;
					}
					else
					{
						this._DeviceGroup_Id = default(int);
					}
					this.SendPropertyChanged("tbl_DeviceGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_DeviceType_tbl_Device", Storage="_tbl_DeviceType", ThisKey="DeviceType_Id", OtherKey="DeviceType_Id", IsForeignKey=true)]
		public tbl_DeviceType tbl_DeviceType
		{
			get
			{
				return this._tbl_DeviceType.Entity;
			}
			set
			{
				tbl_DeviceType previousValue = this._tbl_DeviceType.Entity;
				if (((previousValue != value) 
							|| (this._tbl_DeviceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_DeviceType.Entity = null;
						previousValue.tbl_Devices.Remove(this);
					}
					this._tbl_DeviceType.Entity = value;
					if ((value != null))
					{
						value.tbl_Devices.Add(this);
						this._DeviceType_Id = value.DeviceType_Id;
					}
					else
					{
						this._DeviceType_Id = default(int);
					}
					this.SendPropertyChanged("tbl_DeviceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Sensor_tbl_Device", Storage="_tbl_Sensor", ThisKey="Sensor_Id", OtherKey="Sensor_Id", IsForeignKey=true)]
		public tbl_Sensor tbl_Sensor
		{
			get
			{
				return this._tbl_Sensor.Entity;
			}
			set
			{
				tbl_Sensor previousValue = this._tbl_Sensor.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Sensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Sensor.Entity = null;
						previousValue.tbl_Devices.Remove(this);
					}
					this._tbl_Sensor.Entity = value;
					if ((value != null))
					{
						value.tbl_Devices.Add(this);
						this._Sensor_Id = value.Sensor_Id;
					}
					else
					{
						this._Sensor_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_Sensor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_SensorDatas(tbl_SensorData entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Device = this;
		}
		
		private void detach_tbl_SensorDatas(tbl_SensorData entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Device = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_DeviceGroup")]
	public partial class tbl_DeviceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeviceGroup_Id;
		
		private string _DeviceGroup_Name;
		
		private string _Icon_Opened;
		
		private string _Icon_Closed;
		
		private EntitySet<tbl_Device> _tbl_Devices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeviceGroup_IdChanging(int value);
    partial void OnDeviceGroup_IdChanged();
    partial void OnDeviceGroup_NameChanging(string value);
    partial void OnDeviceGroup_NameChanged();
    partial void OnIcon_OpenedChanging(string value);
    partial void OnIcon_OpenedChanged();
    partial void OnIcon_ClosedChanging(string value);
    partial void OnIcon_ClosedChanged();
    #endregion
		
		public tbl_DeviceGroup()
		{
			this._tbl_Devices = new EntitySet<tbl_Device>(new Action<tbl_Device>(this.attach_tbl_Devices), new Action<tbl_Device>(this.detach_tbl_Devices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceGroup_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeviceGroup_Id
		{
			get
			{
				return this._DeviceGroup_Id;
			}
			set
			{
				if ((this._DeviceGroup_Id != value))
				{
					this.OnDeviceGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._DeviceGroup_Id = value;
					this.SendPropertyChanged("DeviceGroup_Id");
					this.OnDeviceGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceGroup_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string DeviceGroup_Name
		{
			get
			{
				return this._DeviceGroup_Name;
			}
			set
			{
				if ((this._DeviceGroup_Name != value))
				{
					this.OnDeviceGroup_NameChanging(value);
					this.SendPropertyChanging();
					this._DeviceGroup_Name = value;
					this.SendPropertyChanged("DeviceGroup_Name");
					this.OnDeviceGroup_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon_Opened", DbType="NVarChar(50)")]
		public string Icon_Opened
		{
			get
			{
				return this._Icon_Opened;
			}
			set
			{
				if ((this._Icon_Opened != value))
				{
					this.OnIcon_OpenedChanging(value);
					this.SendPropertyChanging();
					this._Icon_Opened = value;
					this.SendPropertyChanged("Icon_Opened");
					this.OnIcon_OpenedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon_Closed", DbType="NVarChar(50)")]
		public string Icon_Closed
		{
			get
			{
				return this._Icon_Closed;
			}
			set
			{
				if ((this._Icon_Closed != value))
				{
					this.OnIcon_ClosedChanging(value);
					this.SendPropertyChanging();
					this._Icon_Closed = value;
					this.SendPropertyChanged("Icon_Closed");
					this.OnIcon_ClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_DeviceGroup_tbl_Device", Storage="_tbl_Devices", ThisKey="DeviceGroup_Id", OtherKey="DeviceGroup_Id")]
		public EntitySet<tbl_Device> tbl_Devices
		{
			get
			{
				return this._tbl_Devices;
			}
			set
			{
				this._tbl_Devices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Devices(tbl_Device entity)
		{
			this.SendPropertyChanging();
			entity.tbl_DeviceGroup = this;
		}
		
		private void detach_tbl_Devices(tbl_Device entity)
		{
			this.SendPropertyChanging();
			entity.tbl_DeviceGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_DeviceType")]
	public partial class tbl_DeviceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeviceType_Id;
		
		private string _DeviceType_Name;
		
		private string _Icon_Opened;
		
		private string _Icon_Closed;
		
		private EntitySet<tbl_Device> _tbl_Devices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeviceType_IdChanging(int value);
    partial void OnDeviceType_IdChanged();
    partial void OnDeviceType_NameChanging(string value);
    partial void OnDeviceType_NameChanged();
    partial void OnIcon_OpenedChanging(string value);
    partial void OnIcon_OpenedChanged();
    partial void OnIcon_ClosedChanging(string value);
    partial void OnIcon_ClosedChanged();
    #endregion
		
		public tbl_DeviceType()
		{
			this._tbl_Devices = new EntitySet<tbl_Device>(new Action<tbl_Device>(this.attach_tbl_Devices), new Action<tbl_Device>(this.detach_tbl_Devices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceType_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeviceType_Id
		{
			get
			{
				return this._DeviceType_Id;
			}
			set
			{
				if ((this._DeviceType_Id != value))
				{
					this.OnDeviceType_IdChanging(value);
					this.SendPropertyChanging();
					this._DeviceType_Id = value;
					this.SendPropertyChanged("DeviceType_Id");
					this.OnDeviceType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceType_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string DeviceType_Name
		{
			get
			{
				return this._DeviceType_Name;
			}
			set
			{
				if ((this._DeviceType_Name != value))
				{
					this.OnDeviceType_NameChanging(value);
					this.SendPropertyChanging();
					this._DeviceType_Name = value;
					this.SendPropertyChanged("DeviceType_Name");
					this.OnDeviceType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon_Opened", DbType="NVarChar(50)")]
		public string Icon_Opened
		{
			get
			{
				return this._Icon_Opened;
			}
			set
			{
				if ((this._Icon_Opened != value))
				{
					this.OnIcon_OpenedChanging(value);
					this.SendPropertyChanging();
					this._Icon_Opened = value;
					this.SendPropertyChanged("Icon_Opened");
					this.OnIcon_OpenedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon_Closed", DbType="NVarChar(50)")]
		public string Icon_Closed
		{
			get
			{
				return this._Icon_Closed;
			}
			set
			{
				if ((this._Icon_Closed != value))
				{
					this.OnIcon_ClosedChanging(value);
					this.SendPropertyChanging();
					this._Icon_Closed = value;
					this.SendPropertyChanged("Icon_Closed");
					this.OnIcon_ClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_DeviceType_tbl_Device", Storage="_tbl_Devices", ThisKey="DeviceType_Id", OtherKey="DeviceType_Id")]
		public EntitySet<tbl_Device> tbl_Devices
		{
			get
			{
				return this._tbl_Devices;
			}
			set
			{
				this._tbl_Devices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Devices(tbl_Device entity)
		{
			this.SendPropertyChanging();
			entity.tbl_DeviceType = this;
		}
		
		private void detach_tbl_Devices(tbl_Device entity)
		{
			this.SendPropertyChanging();
			entity.tbl_DeviceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Gateway")]
	public partial class tbl_Gateway : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Gateway_Id;
		
		private string _Gateway_Name;
		
		private string _Gateway_Address;
		
		private System.Nullable<int> _Gateway_Port;
		
		private System.Nullable<int> _Gateway_BaudRate;
		
		private string _Description;
		
		private EntitySet<tbl_Sensor> _tbl_Sensors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGateway_IdChanging(int value);
    partial void OnGateway_IdChanged();
    partial void OnGateway_NameChanging(string value);
    partial void OnGateway_NameChanged();
    partial void OnGateway_AddressChanging(string value);
    partial void OnGateway_AddressChanged();
    partial void OnGateway_PortChanging(System.Nullable<int> value);
    partial void OnGateway_PortChanged();
    partial void OnGateway_BaudRateChanging(System.Nullable<int> value);
    partial void OnGateway_BaudRateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public tbl_Gateway()
		{
			this._tbl_Sensors = new EntitySet<tbl_Sensor>(new Action<tbl_Sensor>(this.attach_tbl_Sensors), new Action<tbl_Sensor>(this.detach_tbl_Sensors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gateway_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Gateway_Id
		{
			get
			{
				return this._Gateway_Id;
			}
			set
			{
				if ((this._Gateway_Id != value))
				{
					this.OnGateway_IdChanging(value);
					this.SendPropertyChanging();
					this._Gateway_Id = value;
					this.SendPropertyChanged("Gateway_Id");
					this.OnGateway_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gateway_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Gateway_Name
		{
			get
			{
				return this._Gateway_Name;
			}
			set
			{
				if ((this._Gateway_Name != value))
				{
					this.OnGateway_NameChanging(value);
					this.SendPropertyChanging();
					this._Gateway_Name = value;
					this.SendPropertyChanged("Gateway_Name");
					this.OnGateway_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gateway_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Gateway_Address
		{
			get
			{
				return this._Gateway_Address;
			}
			set
			{
				if ((this._Gateway_Address != value))
				{
					this.OnGateway_AddressChanging(value);
					this.SendPropertyChanging();
					this._Gateway_Address = value;
					this.SendPropertyChanged("Gateway_Address");
					this.OnGateway_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gateway_Port", DbType="Int")]
		public System.Nullable<int> Gateway_Port
		{
			get
			{
				return this._Gateway_Port;
			}
			set
			{
				if ((this._Gateway_Port != value))
				{
					this.OnGateway_PortChanging(value);
					this.SendPropertyChanging();
					this._Gateway_Port = value;
					this.SendPropertyChanged("Gateway_Port");
					this.OnGateway_PortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gateway_BaudRate", DbType="Int")]
		public System.Nullable<int> Gateway_BaudRate
		{
			get
			{
				return this._Gateway_BaudRate;
			}
			set
			{
				if ((this._Gateway_BaudRate != value))
				{
					this.OnGateway_BaudRateChanging(value);
					this.SendPropertyChanging();
					this._Gateway_BaudRate = value;
					this.SendPropertyChanged("Gateway_BaudRate");
					this.OnGateway_BaudRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Gateway_tbl_Sensor", Storage="_tbl_Sensors", ThisKey="Gateway_Id", OtherKey="Gateway_Id")]
		public EntitySet<tbl_Sensor> tbl_Sensors
		{
			get
			{
				return this._tbl_Sensors;
			}
			set
			{
				this._tbl_Sensors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Sensors(tbl_Sensor entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Gateway = this;
		}
		
		private void detach_tbl_Sensors(tbl_Sensor entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Gateway = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Sensor")]
	public partial class tbl_Sensor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Sensor_Id;
		
		private string _Sensor_Name;
		
		private int _SensorType_Id;
		
		private string _Description;
		
		private string _Address;
		
		private System.Nullable<int> _Port;
		
		private System.Nullable<int> _BaudRate;
		
		private System.Nullable<int> _Gateway_Id;
		
		private EntitySet<tbl_ActiveSensorParameter> _tbl_ActiveSensorParameters;
		
		private EntitySet<tbl_Device> _tbl_Devices;
		
		private EntitySet<tbl_SensorData> _tbl_SensorDatas;
		
		private EntityRef<tbl_Gateway> _tbl_Gateway;
		
		private EntityRef<tbl_SensorType> _tbl_SensorType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSensor_IdChanging(int value);
    partial void OnSensor_IdChanged();
    partial void OnSensor_NameChanging(string value);
    partial void OnSensor_NameChanged();
    partial void OnSensorType_IdChanging(int value);
    partial void OnSensorType_IdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPortChanging(System.Nullable<int> value);
    partial void OnPortChanged();
    partial void OnBaudRateChanging(System.Nullable<int> value);
    partial void OnBaudRateChanged();
    partial void OnGateway_IdChanging(System.Nullable<int> value);
    partial void OnGateway_IdChanged();
    #endregion
		
		public tbl_Sensor()
		{
			this._tbl_ActiveSensorParameters = new EntitySet<tbl_ActiveSensorParameter>(new Action<tbl_ActiveSensorParameter>(this.attach_tbl_ActiveSensorParameters), new Action<tbl_ActiveSensorParameter>(this.detach_tbl_ActiveSensorParameters));
			this._tbl_Devices = new EntitySet<tbl_Device>(new Action<tbl_Device>(this.attach_tbl_Devices), new Action<tbl_Device>(this.detach_tbl_Devices));
			this._tbl_SensorDatas = new EntitySet<tbl_SensorData>(new Action<tbl_SensorData>(this.attach_tbl_SensorDatas), new Action<tbl_SensorData>(this.detach_tbl_SensorDatas));
			this._tbl_Gateway = default(EntityRef<tbl_Gateway>);
			this._tbl_SensorType = default(EntityRef<tbl_SensorType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sensor_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Sensor_Id
		{
			get
			{
				return this._Sensor_Id;
			}
			set
			{
				if ((this._Sensor_Id != value))
				{
					this.OnSensor_IdChanging(value);
					this.SendPropertyChanging();
					this._Sensor_Id = value;
					this.SendPropertyChanged("Sensor_Id");
					this.OnSensor_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sensor_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Sensor_Name
		{
			get
			{
				return this._Sensor_Name;
			}
			set
			{
				if ((this._Sensor_Name != value))
				{
					this.OnSensor_NameChanging(value);
					this.SendPropertyChanging();
					this._Sensor_Name = value;
					this.SendPropertyChanged("Sensor_Name");
					this.OnSensor_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorType_Id", DbType="Int NOT NULL")]
		public int SensorType_Id
		{
			get
			{
				return this._SensorType_Id;
			}
			set
			{
				if ((this._SensorType_Id != value))
				{
					if (this._tbl_SensorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorType_IdChanging(value);
					this.SendPropertyChanging();
					this._SensorType_Id = value;
					this.SendPropertyChanged("SensorType_Id");
					this.OnSensorType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="Int")]
		public System.Nullable<int> Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaudRate", DbType="Int")]
		public System.Nullable<int> BaudRate
		{
			get
			{
				return this._BaudRate;
			}
			set
			{
				if ((this._BaudRate != value))
				{
					this.OnBaudRateChanging(value);
					this.SendPropertyChanging();
					this._BaudRate = value;
					this.SendPropertyChanged("BaudRate");
					this.OnBaudRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gateway_Id", DbType="Int")]
		public System.Nullable<int> Gateway_Id
		{
			get
			{
				return this._Gateway_Id;
			}
			set
			{
				if ((this._Gateway_Id != value))
				{
					if (this._tbl_Gateway.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGateway_IdChanging(value);
					this.SendPropertyChanging();
					this._Gateway_Id = value;
					this.SendPropertyChanged("Gateway_Id");
					this.OnGateway_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Sensor_tbl_ActiveSensorParameter", Storage="_tbl_ActiveSensorParameters", ThisKey="Sensor_Id", OtherKey="Sensor_Id")]
		public EntitySet<tbl_ActiveSensorParameter> tbl_ActiveSensorParameters
		{
			get
			{
				return this._tbl_ActiveSensorParameters;
			}
			set
			{
				this._tbl_ActiveSensorParameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Sensor_tbl_Device", Storage="_tbl_Devices", ThisKey="Sensor_Id", OtherKey="Sensor_Id")]
		public EntitySet<tbl_Device> tbl_Devices
		{
			get
			{
				return this._tbl_Devices;
			}
			set
			{
				this._tbl_Devices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Sensor_tbl_SensorData", Storage="_tbl_SensorDatas", ThisKey="Sensor_Id", OtherKey="Sensor_Id")]
		public EntitySet<tbl_SensorData> tbl_SensorDatas
		{
			get
			{
				return this._tbl_SensorDatas;
			}
			set
			{
				this._tbl_SensorDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Gateway_tbl_Sensor", Storage="_tbl_Gateway", ThisKey="Gateway_Id", OtherKey="Gateway_Id", IsForeignKey=true)]
		public tbl_Gateway tbl_Gateway
		{
			get
			{
				return this._tbl_Gateway.Entity;
			}
			set
			{
				tbl_Gateway previousValue = this._tbl_Gateway.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Gateway.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Gateway.Entity = null;
						previousValue.tbl_Sensors.Remove(this);
					}
					this._tbl_Gateway.Entity = value;
					if ((value != null))
					{
						value.tbl_Sensors.Add(this);
						this._Gateway_Id = value.Gateway_Id;
					}
					else
					{
						this._Gateway_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_Gateway");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorType_tbl_Sensor", Storage="_tbl_SensorType", ThisKey="SensorType_Id", OtherKey="SensorType_Id", IsForeignKey=true)]
		public tbl_SensorType tbl_SensorType
		{
			get
			{
				return this._tbl_SensorType.Entity;
			}
			set
			{
				tbl_SensorType previousValue = this._tbl_SensorType.Entity;
				if (((previousValue != value) 
							|| (this._tbl_SensorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_SensorType.Entity = null;
						previousValue.tbl_Sensors.Remove(this);
					}
					this._tbl_SensorType.Entity = value;
					if ((value != null))
					{
						value.tbl_Sensors.Add(this);
						this._SensorType_Id = value.SensorType_Id;
					}
					else
					{
						this._SensorType_Id = default(int);
					}
					this.SendPropertyChanged("tbl_SensorType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_ActiveSensorParameters(tbl_ActiveSensorParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Sensor = this;
		}
		
		private void detach_tbl_ActiveSensorParameters(tbl_ActiveSensorParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Sensor = null;
		}
		
		private void attach_tbl_Devices(tbl_Device entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Sensor = this;
		}
		
		private void detach_tbl_Devices(tbl_Device entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Sensor = null;
		}
		
		private void attach_tbl_SensorDatas(tbl_SensorData entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Sensor = this;
		}
		
		private void detach_tbl_SensorDatas(tbl_SensorData entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Sensor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_SensorData")]
	public partial class tbl_SensorData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Data_Id;
		
		private int _Sensor_Id;
		
		private int _SensorTypeParameter_Id;
		
		private decimal _Value;
		
		private System.DateTime _RecordTime;
		
		private System.Nullable<int> _Device_Id;
		
		private EntityRef<tbl_Device> _tbl_Device;
		
		private EntityRef<tbl_Sensor> _tbl_Sensor;
		
		private EntityRef<tbl_SensorTypeParameter> _tbl_SensorTypeParameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnData_IdChanging(int value);
    partial void OnData_IdChanged();
    partial void OnSensor_IdChanging(int value);
    partial void OnSensor_IdChanged();
    partial void OnSensorTypeParameter_IdChanging(int value);
    partial void OnSensorTypeParameter_IdChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnRecordTimeChanging(System.DateTime value);
    partial void OnRecordTimeChanged();
    partial void OnDevice_IdChanging(System.Nullable<int> value);
    partial void OnDevice_IdChanged();
    #endregion
		
		public tbl_SensorData()
		{
			this._tbl_Device = default(EntityRef<tbl_Device>);
			this._tbl_Sensor = default(EntityRef<tbl_Sensor>);
			this._tbl_SensorTypeParameter = default(EntityRef<tbl_SensorTypeParameter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Data_Id
		{
			get
			{
				return this._Data_Id;
			}
			set
			{
				if ((this._Data_Id != value))
				{
					this.OnData_IdChanging(value);
					this.SendPropertyChanging();
					this._Data_Id = value;
					this.SendPropertyChanged("Data_Id");
					this.OnData_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sensor_Id", DbType="Int NOT NULL")]
		public int Sensor_Id
		{
			get
			{
				return this._Sensor_Id;
			}
			set
			{
				if ((this._Sensor_Id != value))
				{
					if (this._tbl_Sensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensor_IdChanging(value);
					this.SendPropertyChanging();
					this._Sensor_Id = value;
					this.SendPropertyChanged("Sensor_Id");
					this.OnSensor_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorTypeParameter_Id", DbType="Int NOT NULL")]
		public int SensorTypeParameter_Id
		{
			get
			{
				return this._SensorTypeParameter_Id;
			}
			set
			{
				if ((this._SensorTypeParameter_Id != value))
				{
					if (this._tbl_SensorTypeParameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorTypeParameter_IdChanging(value);
					this.SendPropertyChanging();
					this._SensorTypeParameter_Id = value;
					this.SendPropertyChanged("SensorTypeParameter_Id");
					this.OnSensorTypeParameter_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordTime", DbType="DateTime NOT NULL")]
		public System.DateTime RecordTime
		{
			get
			{
				return this._RecordTime;
			}
			set
			{
				if ((this._RecordTime != value))
				{
					this.OnRecordTimeChanging(value);
					this.SendPropertyChanging();
					this._RecordTime = value;
					this.SendPropertyChanged("RecordTime");
					this.OnRecordTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Device_Id", DbType="Int")]
		public System.Nullable<int> Device_Id
		{
			get
			{
				return this._Device_Id;
			}
			set
			{
				if ((this._Device_Id != value))
				{
					if (this._tbl_Device.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDevice_IdChanging(value);
					this.SendPropertyChanging();
					this._Device_Id = value;
					this.SendPropertyChanged("Device_Id");
					this.OnDevice_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Device_tbl_SensorData", Storage="_tbl_Device", ThisKey="Device_Id", OtherKey="Device_Id", IsForeignKey=true)]
		public tbl_Device tbl_Device
		{
			get
			{
				return this._tbl_Device.Entity;
			}
			set
			{
				tbl_Device previousValue = this._tbl_Device.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Device.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Device.Entity = null;
						previousValue.tbl_SensorDatas.Remove(this);
					}
					this._tbl_Device.Entity = value;
					if ((value != null))
					{
						value.tbl_SensorDatas.Add(this);
						this._Device_Id = value.Device_Id;
					}
					else
					{
						this._Device_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_Device");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Sensor_tbl_SensorData", Storage="_tbl_Sensor", ThisKey="Sensor_Id", OtherKey="Sensor_Id", IsForeignKey=true)]
		public tbl_Sensor tbl_Sensor
		{
			get
			{
				return this._tbl_Sensor.Entity;
			}
			set
			{
				tbl_Sensor previousValue = this._tbl_Sensor.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Sensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Sensor.Entity = null;
						previousValue.tbl_SensorDatas.Remove(this);
					}
					this._tbl_Sensor.Entity = value;
					if ((value != null))
					{
						value.tbl_SensorDatas.Add(this);
						this._Sensor_Id = value.Sensor_Id;
					}
					else
					{
						this._Sensor_Id = default(int);
					}
					this.SendPropertyChanged("tbl_Sensor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorTypeParameter_tbl_SensorData", Storage="_tbl_SensorTypeParameter", ThisKey="SensorTypeParameter_Id", OtherKey="SensorTypeParameter_Id", IsForeignKey=true)]
		public tbl_SensorTypeParameter tbl_SensorTypeParameter
		{
			get
			{
				return this._tbl_SensorTypeParameter.Entity;
			}
			set
			{
				tbl_SensorTypeParameter previousValue = this._tbl_SensorTypeParameter.Entity;
				if (((previousValue != value) 
							|| (this._tbl_SensorTypeParameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_SensorTypeParameter.Entity = null;
						previousValue.tbl_SensorDatas.Remove(this);
					}
					this._tbl_SensorTypeParameter.Entity = value;
					if ((value != null))
					{
						value.tbl_SensorDatas.Add(this);
						this._SensorTypeParameter_Id = value.SensorTypeParameter_Id;
					}
					else
					{
						this._SensorTypeParameter_Id = default(int);
					}
					this.SendPropertyChanged("tbl_SensorTypeParameter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_SensorType")]
	public partial class tbl_SensorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SensorType_Id;
		
		private string _SensorType_Name;
		
		private string _SensorType_Model;
		
		private int _Min_Interval;
		
		private string _Param1;
		
		private string _Param2;
		
		private string _Param3;
		
		private string _Description;
		
		private EntitySet<tbl_Sensor> _tbl_Sensors;
		
		private EntitySet<tbl_SensorTypeParameter> _tbl_SensorTypeParameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSensorType_IdChanging(int value);
    partial void OnSensorType_IdChanged();
    partial void OnSensorType_NameChanging(string value);
    partial void OnSensorType_NameChanged();
    partial void OnSensorType_ModelChanging(string value);
    partial void OnSensorType_ModelChanged();
    partial void OnMin_IntervalChanging(int value);
    partial void OnMin_IntervalChanged();
    partial void OnParam1Changing(string value);
    partial void OnParam1Changed();
    partial void OnParam2Changing(string value);
    partial void OnParam2Changed();
    partial void OnParam3Changing(string value);
    partial void OnParam3Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public tbl_SensorType()
		{
			this._tbl_Sensors = new EntitySet<tbl_Sensor>(new Action<tbl_Sensor>(this.attach_tbl_Sensors), new Action<tbl_Sensor>(this.detach_tbl_Sensors));
			this._tbl_SensorTypeParameters = new EntitySet<tbl_SensorTypeParameter>(new Action<tbl_SensorTypeParameter>(this.attach_tbl_SensorTypeParameters), new Action<tbl_SensorTypeParameter>(this.detach_tbl_SensorTypeParameters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorType_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SensorType_Id
		{
			get
			{
				return this._SensorType_Id;
			}
			set
			{
				if ((this._SensorType_Id != value))
				{
					this.OnSensorType_IdChanging(value);
					this.SendPropertyChanging();
					this._SensorType_Id = value;
					this.SendPropertyChanged("SensorType_Id");
					this.OnSensorType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorType_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SensorType_Name
		{
			get
			{
				return this._SensorType_Name;
			}
			set
			{
				if ((this._SensorType_Name != value))
				{
					this.OnSensorType_NameChanging(value);
					this.SendPropertyChanging();
					this._SensorType_Name = value;
					this.SendPropertyChanged("SensorType_Name");
					this.OnSensorType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorType_Model", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SensorType_Model
		{
			get
			{
				return this._SensorType_Model;
			}
			set
			{
				if ((this._SensorType_Model != value))
				{
					this.OnSensorType_ModelChanging(value);
					this.SendPropertyChanging();
					this._SensorType_Model = value;
					this.SendPropertyChanged("SensorType_Model");
					this.OnSensorType_ModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Min_Interval", DbType="Int NOT NULL")]
		public int Min_Interval
		{
			get
			{
				return this._Min_Interval;
			}
			set
			{
				if ((this._Min_Interval != value))
				{
					this.OnMin_IntervalChanging(value);
					this.SendPropertyChanging();
					this._Min_Interval = value;
					this.SendPropertyChanged("Min_Interval");
					this.OnMin_IntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param1", DbType="NVarChar(50)")]
		public string Param1
		{
			get
			{
				return this._Param1;
			}
			set
			{
				if ((this._Param1 != value))
				{
					this.OnParam1Changing(value);
					this.SendPropertyChanging();
					this._Param1 = value;
					this.SendPropertyChanged("Param1");
					this.OnParam1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param2", DbType="NVarChar(50)")]
		public string Param2
		{
			get
			{
				return this._Param2;
			}
			set
			{
				if ((this._Param2 != value))
				{
					this.OnParam2Changing(value);
					this.SendPropertyChanging();
					this._Param2 = value;
					this.SendPropertyChanged("Param2");
					this.OnParam2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param3", DbType="NVarChar(50)")]
		public string Param3
		{
			get
			{
				return this._Param3;
			}
			set
			{
				if ((this._Param3 != value))
				{
					this.OnParam3Changing(value);
					this.SendPropertyChanging();
					this._Param3 = value;
					this.SendPropertyChanged("Param3");
					this.OnParam3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorType_tbl_Sensor", Storage="_tbl_Sensors", ThisKey="SensorType_Id", OtherKey="SensorType_Id")]
		public EntitySet<tbl_Sensor> tbl_Sensors
		{
			get
			{
				return this._tbl_Sensors;
			}
			set
			{
				this._tbl_Sensors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorType_tbl_SensorTypeParameter", Storage="_tbl_SensorTypeParameters", ThisKey="SensorType_Id", OtherKey="SensorType_Id")]
		public EntitySet<tbl_SensorTypeParameter> tbl_SensorTypeParameters
		{
			get
			{
				return this._tbl_SensorTypeParameters;
			}
			set
			{
				this._tbl_SensorTypeParameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Sensors(tbl_Sensor entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorType = this;
		}
		
		private void detach_tbl_Sensors(tbl_Sensor entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorType = null;
		}
		
		private void attach_tbl_SensorTypeParameters(tbl_SensorTypeParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorType = this;
		}
		
		private void detach_tbl_SensorTypeParameters(tbl_SensorTypeParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_SensorTypeParameter")]
	public partial class tbl_SensorTypeParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SensorTypeParameter_Id;
		
		private int _SensorType_Id;
		
		private int _ParameterName_Id;
		
		private string _ParameterRegister_Address;
		
		private int _Parameter_ByteLength;
		
		private int _ValueType_Id;
		
		private int _Unit_Id;
		
		private bool _Parameter_RW;
		
		private string _Description;
		
		private EntitySet<tbl_ActiveSensorParameter> _tbl_ActiveSensorParameters;
		
		private EntitySet<tbl_SensorData> _tbl_SensorDatas;
		
		private EntityRef<tbl_ValueType> _tbl_ValueType;
		
		private EntityRef<tbl_SensorType> _tbl_SensorType;
		
		private EntityRef<tbl_SensorTypeParameterName> _tbl_SensorTypeParameterName;
		
		private EntityRef<tbl_Unit> _tbl_Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSensorTypeParameter_IdChanging(int value);
    partial void OnSensorTypeParameter_IdChanged();
    partial void OnSensorType_IdChanging(int value);
    partial void OnSensorType_IdChanged();
    partial void OnParameterName_IdChanging(int value);
    partial void OnParameterName_IdChanged();
    partial void OnParameterRegister_AddressChanging(string value);
    partial void OnParameterRegister_AddressChanged();
    partial void OnParameter_ByteLengthChanging(int value);
    partial void OnParameter_ByteLengthChanged();
    partial void OnValueType_IdChanging(int value);
    partial void OnValueType_IdChanged();
    partial void OnUnit_IdChanging(int value);
    partial void OnUnit_IdChanged();
    partial void OnParameter_RWChanging(bool value);
    partial void OnParameter_RWChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public tbl_SensorTypeParameter()
		{
			this._tbl_ActiveSensorParameters = new EntitySet<tbl_ActiveSensorParameter>(new Action<tbl_ActiveSensorParameter>(this.attach_tbl_ActiveSensorParameters), new Action<tbl_ActiveSensorParameter>(this.detach_tbl_ActiveSensorParameters));
			this._tbl_SensorDatas = new EntitySet<tbl_SensorData>(new Action<tbl_SensorData>(this.attach_tbl_SensorDatas), new Action<tbl_SensorData>(this.detach_tbl_SensorDatas));
			this._tbl_ValueType = default(EntityRef<tbl_ValueType>);
			this._tbl_SensorType = default(EntityRef<tbl_SensorType>);
			this._tbl_SensorTypeParameterName = default(EntityRef<tbl_SensorTypeParameterName>);
			this._tbl_Unit = default(EntityRef<tbl_Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorTypeParameter_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SensorTypeParameter_Id
		{
			get
			{
				return this._SensorTypeParameter_Id;
			}
			set
			{
				if ((this._SensorTypeParameter_Id != value))
				{
					this.OnSensorTypeParameter_IdChanging(value);
					this.SendPropertyChanging();
					this._SensorTypeParameter_Id = value;
					this.SendPropertyChanged("SensorTypeParameter_Id");
					this.OnSensorTypeParameter_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorType_Id", DbType="Int NOT NULL")]
		public int SensorType_Id
		{
			get
			{
				return this._SensorType_Id;
			}
			set
			{
				if ((this._SensorType_Id != value))
				{
					if (this._tbl_SensorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorType_IdChanging(value);
					this.SendPropertyChanging();
					this._SensorType_Id = value;
					this.SendPropertyChanged("SensorType_Id");
					this.OnSensorType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterName_Id", DbType="Int NOT NULL")]
		public int ParameterName_Id
		{
			get
			{
				return this._ParameterName_Id;
			}
			set
			{
				if ((this._ParameterName_Id != value))
				{
					if (this._tbl_SensorTypeParameterName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterName_IdChanging(value);
					this.SendPropertyChanging();
					this._ParameterName_Id = value;
					this.SendPropertyChanged("ParameterName_Id");
					this.OnParameterName_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterRegister_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ParameterRegister_Address
		{
			get
			{
				return this._ParameterRegister_Address;
			}
			set
			{
				if ((this._ParameterRegister_Address != value))
				{
					this.OnParameterRegister_AddressChanging(value);
					this.SendPropertyChanging();
					this._ParameterRegister_Address = value;
					this.SendPropertyChanged("ParameterRegister_Address");
					this.OnParameterRegister_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parameter_ByteLength", DbType="Int NOT NULL")]
		public int Parameter_ByteLength
		{
			get
			{
				return this._Parameter_ByteLength;
			}
			set
			{
				if ((this._Parameter_ByteLength != value))
				{
					this.OnParameter_ByteLengthChanging(value);
					this.SendPropertyChanging();
					this._Parameter_ByteLength = value;
					this.SendPropertyChanged("Parameter_ByteLength");
					this.OnParameter_ByteLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueType_Id", DbType="Int NOT NULL")]
		public int ValueType_Id
		{
			get
			{
				return this._ValueType_Id;
			}
			set
			{
				if ((this._ValueType_Id != value))
				{
					if (this._tbl_ValueType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueType_IdChanging(value);
					this.SendPropertyChanging();
					this._ValueType_Id = value;
					this.SendPropertyChanged("ValueType_Id");
					this.OnValueType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Id", DbType="Int NOT NULL")]
		public int Unit_Id
		{
			get
			{
				return this._Unit_Id;
			}
			set
			{
				if ((this._Unit_Id != value))
				{
					if (this._tbl_Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnit_IdChanging(value);
					this.SendPropertyChanging();
					this._Unit_Id = value;
					this.SendPropertyChanged("Unit_Id");
					this.OnUnit_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parameter_RW", DbType="Bit NOT NULL")]
		public bool Parameter_RW
		{
			get
			{
				return this._Parameter_RW;
			}
			set
			{
				if ((this._Parameter_RW != value))
				{
					this.OnParameter_RWChanging(value);
					this.SendPropertyChanging();
					this._Parameter_RW = value;
					this.SendPropertyChanged("Parameter_RW");
					this.OnParameter_RWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorTypeParameter_tbl_ActiveSensorParameter", Storage="_tbl_ActiveSensorParameters", ThisKey="SensorTypeParameter_Id", OtherKey="SensorTypeParameter_Id")]
		public EntitySet<tbl_ActiveSensorParameter> tbl_ActiveSensorParameters
		{
			get
			{
				return this._tbl_ActiveSensorParameters;
			}
			set
			{
				this._tbl_ActiveSensorParameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorTypeParameter_tbl_SensorData", Storage="_tbl_SensorDatas", ThisKey="SensorTypeParameter_Id", OtherKey="SensorTypeParameter_Id")]
		public EntitySet<tbl_SensorData> tbl_SensorDatas
		{
			get
			{
				return this._tbl_SensorDatas;
			}
			set
			{
				this._tbl_SensorDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_ValueType_tbl_SensorTypeParameter", Storage="_tbl_ValueType", ThisKey="ValueType_Id", OtherKey="ValueType_Id", IsForeignKey=true)]
		public tbl_ValueType tbl_ValueType
		{
			get
			{
				return this._tbl_ValueType.Entity;
			}
			set
			{
				tbl_ValueType previousValue = this._tbl_ValueType.Entity;
				if (((previousValue != value) 
							|| (this._tbl_ValueType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_ValueType.Entity = null;
						previousValue.tbl_SensorTypeParameters.Remove(this);
					}
					this._tbl_ValueType.Entity = value;
					if ((value != null))
					{
						value.tbl_SensorTypeParameters.Add(this);
						this._ValueType_Id = value.ValueType_Id;
					}
					else
					{
						this._ValueType_Id = default(int);
					}
					this.SendPropertyChanged("tbl_ValueType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorType_tbl_SensorTypeParameter", Storage="_tbl_SensorType", ThisKey="SensorType_Id", OtherKey="SensorType_Id", IsForeignKey=true)]
		public tbl_SensorType tbl_SensorType
		{
			get
			{
				return this._tbl_SensorType.Entity;
			}
			set
			{
				tbl_SensorType previousValue = this._tbl_SensorType.Entity;
				if (((previousValue != value) 
							|| (this._tbl_SensorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_SensorType.Entity = null;
						previousValue.tbl_SensorTypeParameters.Remove(this);
					}
					this._tbl_SensorType.Entity = value;
					if ((value != null))
					{
						value.tbl_SensorTypeParameters.Add(this);
						this._SensorType_Id = value.SensorType_Id;
					}
					else
					{
						this._SensorType_Id = default(int);
					}
					this.SendPropertyChanged("tbl_SensorType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorTypeParameterName_tbl_SensorTypeParameter", Storage="_tbl_SensorTypeParameterName", ThisKey="ParameterName_Id", OtherKey="ParameterName_Id", IsForeignKey=true)]
		public tbl_SensorTypeParameterName tbl_SensorTypeParameterName
		{
			get
			{
				return this._tbl_SensorTypeParameterName.Entity;
			}
			set
			{
				tbl_SensorTypeParameterName previousValue = this._tbl_SensorTypeParameterName.Entity;
				if (((previousValue != value) 
							|| (this._tbl_SensorTypeParameterName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_SensorTypeParameterName.Entity = null;
						previousValue.tbl_SensorTypeParameters.Remove(this);
					}
					this._tbl_SensorTypeParameterName.Entity = value;
					if ((value != null))
					{
						value.tbl_SensorTypeParameters.Add(this);
						this._ParameterName_Id = value.ParameterName_Id;
					}
					else
					{
						this._ParameterName_Id = default(int);
					}
					this.SendPropertyChanged("tbl_SensorTypeParameterName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Unit_tbl_SensorTypeParameter", Storage="_tbl_Unit", ThisKey="Unit_Id", OtherKey="Unit_Id", IsForeignKey=true)]
		public tbl_Unit tbl_Unit
		{
			get
			{
				return this._tbl_Unit.Entity;
			}
			set
			{
				tbl_Unit previousValue = this._tbl_Unit.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Unit.Entity = null;
						previousValue.tbl_SensorTypeParameters.Remove(this);
					}
					this._tbl_Unit.Entity = value;
					if ((value != null))
					{
						value.tbl_SensorTypeParameters.Add(this);
						this._Unit_Id = value.Unit_Id;
					}
					else
					{
						this._Unit_Id = default(int);
					}
					this.SendPropertyChanged("tbl_Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_ActiveSensorParameters(tbl_ActiveSensorParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorTypeParameter = this;
		}
		
		private void detach_tbl_ActiveSensorParameters(tbl_ActiveSensorParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorTypeParameter = null;
		}
		
		private void attach_tbl_SensorDatas(tbl_SensorData entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorTypeParameter = this;
		}
		
		private void detach_tbl_SensorDatas(tbl_SensorData entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorTypeParameter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_SensorTypeParameterName")]
	public partial class tbl_SensorTypeParameterName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParameterName_Id;
		
		private string _ParameterName;
		
		private string _Description;
		
		private EntitySet<tbl_SensorTypeParameter> _tbl_SensorTypeParameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterName_IdChanging(int value);
    partial void OnParameterName_IdChanged();
    partial void OnParameterNameChanging(string value);
    partial void OnParameterNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public tbl_SensorTypeParameterName()
		{
			this._tbl_SensorTypeParameters = new EntitySet<tbl_SensorTypeParameter>(new Action<tbl_SensorTypeParameter>(this.attach_tbl_SensorTypeParameters), new Action<tbl_SensorTypeParameter>(this.detach_tbl_SensorTypeParameters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterName_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParameterName_Id
		{
			get
			{
				return this._ParameterName_Id;
			}
			set
			{
				if ((this._ParameterName_Id != value))
				{
					this.OnParameterName_IdChanging(value);
					this.SendPropertyChanging();
					this._ParameterName_Id = value;
					this.SendPropertyChanged("ParameterName_Id");
					this.OnParameterName_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ParameterName
		{
			get
			{
				return this._ParameterName;
			}
			set
			{
				if ((this._ParameterName != value))
				{
					this.OnParameterNameChanging(value);
					this.SendPropertyChanging();
					this._ParameterName = value;
					this.SendPropertyChanged("ParameterName");
					this.OnParameterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_SensorTypeParameterName_tbl_SensorTypeParameter", Storage="_tbl_SensorTypeParameters", ThisKey="ParameterName_Id", OtherKey="ParameterName_Id")]
		public EntitySet<tbl_SensorTypeParameter> tbl_SensorTypeParameters
		{
			get
			{
				return this._tbl_SensorTypeParameters;
			}
			set
			{
				this._tbl_SensorTypeParameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_SensorTypeParameters(tbl_SensorTypeParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorTypeParameterName = this;
		}
		
		private void detach_tbl_SensorTypeParameters(tbl_SensorTypeParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SensorTypeParameterName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Unit")]
	public partial class tbl_Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Unit_Id;
		
		private string _Unit_Name;
		
		private string _Unit_Char;
		
		private EntitySet<tbl_SensorTypeParameter> _tbl_SensorTypeParameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnit_IdChanging(int value);
    partial void OnUnit_IdChanged();
    partial void OnUnit_NameChanging(string value);
    partial void OnUnit_NameChanged();
    partial void OnUnit_CharChanging(string value);
    partial void OnUnit_CharChanged();
    #endregion
		
		public tbl_Unit()
		{
			this._tbl_SensorTypeParameters = new EntitySet<tbl_SensorTypeParameter>(new Action<tbl_SensorTypeParameter>(this.attach_tbl_SensorTypeParameters), new Action<tbl_SensorTypeParameter>(this.detach_tbl_SensorTypeParameters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Unit_Id
		{
			get
			{
				return this._Unit_Id;
			}
			set
			{
				if ((this._Unit_Id != value))
				{
					this.OnUnit_IdChanging(value);
					this.SendPropertyChanging();
					this._Unit_Id = value;
					this.SendPropertyChanged("Unit_Id");
					this.OnUnit_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Unit_Name
		{
			get
			{
				return this._Unit_Name;
			}
			set
			{
				if ((this._Unit_Name != value))
				{
					this.OnUnit_NameChanging(value);
					this.SendPropertyChanging();
					this._Unit_Name = value;
					this.SendPropertyChanged("Unit_Name");
					this.OnUnit_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Char", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit_Char
		{
			get
			{
				return this._Unit_Char;
			}
			set
			{
				if ((this._Unit_Char != value))
				{
					this.OnUnit_CharChanging(value);
					this.SendPropertyChanging();
					this._Unit_Char = value;
					this.SendPropertyChanged("Unit_Char");
					this.OnUnit_CharChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Unit_tbl_SensorTypeParameter", Storage="_tbl_SensorTypeParameters", ThisKey="Unit_Id", OtherKey="Unit_Id")]
		public EntitySet<tbl_SensorTypeParameter> tbl_SensorTypeParameters
		{
			get
			{
				return this._tbl_SensorTypeParameters;
			}
			set
			{
				this._tbl_SensorTypeParameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_SensorTypeParameters(tbl_SensorTypeParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Unit = this;
		}
		
		private void detach_tbl_SensorTypeParameters(tbl_SensorTypeParameter entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Unit = null;
		}
	}
}
#pragma warning restore 1591
