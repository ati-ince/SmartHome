v2.1 base yapi, v2.2 den itibaren bir seyler yapmaya basladik.

V2.2 de SerialCOMM uzerinde guzel sekilde calisan bir yazilimimiz oldu ama bu SerialPort kisimlarinin tamamini tek bir Struct icerisine tasimak istiyorum.
Boylece StandartSerialStruct icerisinde Xtender, 4Noks, RemoteCOMM ve diger olasi seriport cihazlarin SerialPort _SerialPort refranslari (var ile ic fonksiyona gecirilmesi sayesinde)
	bunun yaninda o serialport obj sine ait tum degiskenler, baudrate vb tamami burada yer alacaktir. 
    sikinti bunlari duzgun zamanda gecirebilmek "ref" ile.

V2.3 de ise yukarida bahsettigim olayi yapmaya calisacagim. Boylece sadece tek bir ANA StandartSerialComStruct referansi gecirilerek her bir 
	seriport obj si, adresi, alinan ve gonderilcek datasi alinma ve gonderilme zamanlari vb tamami tasinmasi saglanabilecektir.

V2.3 devaminda kismi olarak istedigimi yapabildim. Tum verileri StandartSerialStruct ta toplayabiliyorum ama bunun tamami yine de el ile SerialPort obj ye gecirilebilmkte.
	Metodumuz su sekilde olacak: Herhangi bir sekilde haberlesme yapildiginda tum veriler ve bilgiler (Port bilgileri, gdecek-gelen byte datalar ve giden gelen veri zamanlari(time) vb) StandarSerialStruct icerisindeki
	ilgili alt struct da tutulacak (her biri icin alt struct taimlandi: Xtender, ModBus4Noks, Remote ve olasi diger protokoller ...) 
	ancak her halukarda haberlesme yapilacak SerialPort obj "ref" ile ilgili class'a (ornegin Algorithm) ile birlikte kullanilabilecektir.
	Ornegin: Xtender ve ModBus4Noks Algoritma icinde kullanilacaksa veri su sekilde gonderilebilecektir:
	AlgorithStart(ref StandartSerialStruct, ref _Xtender, ref _ModBus4Noks) .... Ancak bu sekilde kismi olarak paramtre azaltilmasi yapilabildi.
	Tum veriler StandartStruct icerisinde maalesef gonderilememekte...... 
	
Good news :))))))  Struct icerisinde serialPort tanimlamasi yapabiliyoruz ve Form icerisindeki _Xtender verilerini struct icerisine cekebildim ....

V2.3 de sonunda basardim :))))) xtender_info ile Form icerisinde test ettigimde istedigim gibi calisti.
	Bundan sonra SerialCOMM icerisindeki StandarSerialStruct icerisine public SerialPort tanimlamasi yaparak tum classlar arasinda sadece tek "ref" struct gezdirecegiz ve boylece kalabalik ortadan kalkacak.
	
V2.4 den devam ediyoruz (July31).... Hangi port ve cihaz kullandigimizi galiba StandarStruct daki "bool" degerleri ile anlayabilecez...  

NOT: SerialCOMM icerisindeki "StandardSerialComStruct" bizim en onemli struct ifademiz olmakta. Burada seri porta ait verileri ornegin Xtender icin "StructXtender" sub-struct icerisinde tutmaktayiz. Ayni zamanda tasima amacli yine Xtender icin bu struct icerisinde "_XtenderSerialPort" serialport obj tutmaktayiz.
	Burada onemli olan serialWrit gibi methodlara tasima yaparken bool olarak hangi porta yazdirilacagi rahatlikla tasinabilmekte fakat receive yapilirken bunun nasil belirlencegine su an pek emin degilim .....
	Ancak, dataReceive icin her birinin kendi fonksiyonu/methodu bulunmasi sebebi ile muhtemelen boyle bir sikintimiz olmayacak, greksiz olduguna kanaat getirilirse Struct icerisinden kaldirilacaktir...

    Yazilimda SerialWrite ve SerialRead kismlarinda StandartStruct icerisinde bulunan StandartSerialObj kullanilmaktadr su anda.
	Boylece Port ismi yazilmadan tumu icin buffer olarak bu yapi ile bilgiler ve gelen-gidecek veriler tasinabilmektedir. 

	Xtender da read yapilacak registerlari el ile girip upuzun bir yazilim yerine bunlari excell den cekip otomatik okutup sorgulatmayi deneyecegim..
	Bu amac dogrultusunda excell kullanimi amaci ile bir Class hazirlamaktayiz... 

V2.5'dn devam ediyoruz (Aug09).. Oncelikle incelemeler yapalim nerede kalmistik. Bir sey yapmadık (Aug20'den devam edıyoruz)
Bu surumde ExcelUsage.cs  CLASS'ini hallettik. Bu asamaya kadar Ammonit-DataBaseSQL-ExcelUsage ve KISMI olarak LOGGING kismina bir seyler yazdik. 
Sabahtan (Aug21) SerialCOMM ve Logging CLASS'larini beraberce halledelim... (Sbah 11.30 gibi) Logging CLASS tamamlandi. Artik bunu rahatlikla istedigimiz yerde kullanabiliriz.
Oncelikle SerialComm ile deneyip kullanacagiz. Burada Logging tekrar degistirildi.
Yazilim CLASS:Inherance yapisina donusturuldu

Bu calismada sadece Xtender kismi Ammonit DB kimina eklenmesi halledilmeye calisilmistir.

EExcelUsage:Logging
Serial:Logging
DataBaseSQL:Logging
Xtender:Serial (+ DataBaseSQL CLASS eklendi )   
.....

Buradan sonra SerialCOMM duzenlenmis ve Xtender halledilmektedir. DataBaseSQL kisminda Logging formati olmasi gereken ytapiya cekilmis ve duzenlenmistir. 
Ammonit icerisinde DataBase inherince yapilmistir ve duzenlenmistir. 
Yanliz yazilim calistirildiginda Ammonit Database'ye yazdiracagi zaman bir hata aldim sebebini ogrenip xtender icinde bir duzenleme yapacagiz...

(October09 Devam) Burada yaptığım kontrollerde SQL bağlantısında (Server Explorer) bir sorun gözükmemekte. Sorun DataBaseSQL.CS dosyasında olabilir. 
V2.5.4 çalışan bir sürümdür, DB için test edilen Oguz-Prj3 - v3 sürümünden farklı olmayıp bağlantı kurduktan sonra DB üzerine kayıt yapabilmekte. Log kayıtları da düzgün ve ayrıntılı şekilde tutulmaktadır.
Buna şimdi Ana algoritma için Xtender eklemesi yapıp DB'ye kayıt yapmayı deneyeceğiz.

V2.6'da Xtender datalarını okumaya başladık. Buradan devam edeceğim, nedense hepsini randımanlı şekilde okumamakta, acaba Xtender geç mi cevap veriyor tam anlamadım. 
Bu kismi Sleep() komutunu devre dışı bırakarak her bir (Algorithm1 için elbette) cycle de 1 tane Ammonit (yani tüm frame) ve 1 tane de Xtender register'i okuyup database'ye yazmaktayız. Böylece:
	Ammonit
	Xtender  READ registerleri güzelce okunuyor, Log ediliyor, render edildikten sonra da değeri database'ye EKLENMEMEKTE ve HATA VERMEKTEDIR !!! -> OĞUZ SORACAZ...

Bu 2.6 dan devam etmek daha dogru gelıyor. Her ne kadar Xtender bır sure db e READ regıster kaydı yapıp sonradan hata alsak ta en azından ammonıt ve xtender algorıtma ıcerısınde calısmakta.
Tımer ıle yaptıgımız ısı daha sonrasında multıthread halıne getırebılırız...
Bu 2.6'da Logging yaparken hata felan alınabiliyor, bunu try catch ile çözdüm gibi ama sadece çökmesini engelledik. Belki de çözümü sadece budur. 2.7den 4Noks eklemesi yaparak devam edelim...
NOT: V2.6 yı 3 kesintisiz çalıştırdım, baktıgımda göçmediğini gördüm, birkaç düzenleme sonunda da kusursuz hale getirecegiz, try-catch ile muhtemelen.

V2.7'de 4Noks eklemesi yapıyoruz. Daha önceden çalıştırdığımız kodu buraya entegre edeceğiz.  Daha önceden çalıştırdığımız kodu buraya entegre edeceğiz. Öncelikle, Start Stop Alg butonları aktif-pasif özelliği ve algoritma seçme seçeneği getirildi.
@ Excel duzenlemesi yaparak hem xtender hemde 4noks için gerekli kısımların okunmasını saglamam gerekmekte.

